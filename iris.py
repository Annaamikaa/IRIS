# -*- coding: utf-8 -*-
"""iris.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GV-rmGJVQ34GMgiWDivj8vRinV8JvGEa

**IRIS FLOWER CLASSIFICATION**

Presentation:

The Iris blossom dataset is an exemplary dataset utilized in AI for characterization errands. It contains estimations of iris blossoms ordered into three species: Setosa, Versicolor, and Virginica. The objective is to foster an AI model that can precisely group iris blossoms in light of their sepal and petal estimations.

In this task, we'll utilize the Help Vector Machine (SVM) calculation to assemble the order model. We'll prepare the model on a subset of the dataset, assess its exhibition, and expect to accomplish exact grouping of iris blossoms into their individual species. Through this undertaking, we'll exhibit the down to earth use of AI procedures in tackling order issues utilizing the Iris dataset for instance.
"""

# Importing necessary libraries
import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score

# Step 1: Load the dataset
data = pd.read_csv('/content/IRIS.csv')

iris = load_iris()
X = iris.data
y = iris.target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize features by removing the mean and scaling to unit variance
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize Support Vector Classifier
svm_model = SVC(kernel='linear', C=1.0, random_state=42)

# Train the model
svm_model.fit(X_train_scaled, y_train)

# Predict on the test set
y_pred = svm_model.predict(X_test_scaled)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("\nClassification Report:\n", classification_report(y_test, y_pred))

"""In conclusion, our Support Vector Machine (SVM) model achieved an impressive accuracy of 96.67% on the Iris dataset. The classification report further illustrates the model's performance across the three species: Setosa, Versicolor, and Virginica. With precision, recall, and F1-score metrics showing high values across the board, particularly for Setosa, our model demonstrates robust classification capabilities. Overall, this project highlights the effectiveness of SVM in accurately classifying Iris flowers based on their sepal and petal measurements, reaffirming the practical utility of machine learning algorithms in real-world classification tasks.

**Visualization**
"""

import matplotlib.pyplot as plt
from sklearn.datasets import load_iris

# Extract features
sepal_length = X[:, 0]
sepal_width = X[:, 1]
petal_length = X[:, 2]
petal_width = X[:, 3]

# Create a scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(sepal_length[y == 0], sepal_width[y == 0], color='r', label='Setosa')
plt.scatter(sepal_length[y == 1], sepal_width[y == 1], color='g', label='Versicolor')
plt.scatter(sepal_length[y == 2], sepal_width[y == 2], color='b', label='Virginica')
# Set labels and title
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.title('Iris Dataset - Sepal Measurements')
plt.legend()
# Show plot
plt.grid(True)
plt.show()

"""In outline, we effectively fostered a grouping model utilizing the Help Vector Machine calculation to precisely order Iris blossoms into their particular species in light of their sepal and petal estimations. The model exhibited high precision, displaying the down to earth utilization of AI methods on genuine world datasets like the Iris dataset. This venture fills in as a principal prologue to characterization errands and features the meaning of the Iris dataset as a benchmark.

**bar graph**
"""

# Precision, Recall, and F1-score values for each class
precision = [1.00, 1.00, 0.92]
recall = [1.00, 0.89, 1.00]
f1_score = [1.00, 0.94, 0.96]
classes = ['Setosa', 'Versicolor', 'Virginica']

# Plotting
fig, ax = plt.subplots(figsize=(10, 6))

bar_width = 0.25
index = np.arange(len(classes))
bar1 = ax.bar(index, precision, bar_width, label='Precision')
bar2 = ax.bar(index + bar_width, recall, bar_width, label='Recall')
bar3 = ax.bar(index + 2 * bar_width, f1_score, bar_width, label='F1-score')

ax.set_xlabel('Classes')
ax.set_ylabel('Scores')
ax.set_title('Performance Metrics by Class')
ax.set_xticks(index + bar_width)
ax.set_xticklabels(classes)
ax.legend()

plt.tight_layout()
plt.show()

"""In summary, the bar graph highlights the performance metrics (precision, recall, and F1-score) of our classification model across the Setosa, Versicolor, and Virginica classes. While Setosa exhibited perfect scores, Versicolor showed slightly lower recall, and Virginica demonstrated strong precision and recall. Overall, the Support Vector Machine model demonstrated robust classification capabilities across all classes, reaffirming its effectiveness in accurately categorizing Iris flowers based on their measurements.

**In short, our project successfully utilized the Support Vector Machine algorithm to achieve a high accuracy of 96.67% in classifying Iris flowers into their respective species. Through comprehensive evaluation and visualization, we observed robust classification capabilities across all species. This underscores the practical utility of machine learning techniques, particularly SVM, in accurately categorizing data based on complex features like sepal and petal measurements.**
"""